package cs1302.arcade;

import javafx.scene.transform.Rotate;
import javafx.geometry.Point2D;
import cs1302.arcade.Ship;
import javafx.scene.shape.Polygon;
import java.util.Random;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import cs1302.arcade.MainMenu;

/**
 * Application subclass for {@code ArcadeApp}.
 * @version 2019.fa
 */

public class ArcadeApp extends Application {
    Group group = new Group();           // main container
    Random rng = new Random();           // random number generator
    Rectangle r = new Rectangle(20, 20); // some rectangle
    ChessBoard chess = new ChessBoard();
    AsteroidsGame asteroids = new AsteroidsGame();
    MainMenu menu = new MainMenu();

    /**
     * Return a key event handler that moves to the rectangle to the left
     * or the right depending on what key event is generated by the associated
     * node.
     * @return the key event handler
     */

    private EventHandler<? super KeyEvent> createKeyHandler(Stage stage, Scene scene) {
        return event -> {
            switch (event.getCode()) {
            case LEFT:  // KeyCode.LEFT
                r.setX(r.getX() - 10.0);
                break;
            case RIGHT: // KeyCode.RIGHT
                r.setX(r.getX() + 10.0);
                break;
            case UP: // KeyCode.UP
                r.setY(r.getY() - 10.0);
                break;
            case DOWN: //KeyCode.DOWN
                r.setY(r.getY() + 10.0);
                break;
            case Q:
                System.exit(0);
                break;
            case DIGIT1:
                chess = new ChessBoard();
                chess.getSwitch(stage, scene);
                stage.setScene(chess.getScene());
                break;
            case DIGIT2:
                stage.setScene(asteroids.getScene());
                break;
            } // switch
            // boundary checking
            if (r.getX() > 620.0) {
                r.setX(r.getX() - 10.0);
            } else if (r.getX() < 0.0) {
                r.setX(r.getX() + 10.0);
            }
            if (r.getY() > 460.0) {
                r.setY(r.getY() - 10.0);
            } else if (r.getY() < 0.0) {
                r.setY(r.getY() + 10.0);
            }
        };
    } // createKeyHandler

    /** {@inheritDoc} */
    @Override
    public void start(Stage stage) {

        /* You are allowed to rewrite this start method, add other methods,
         * files, classes, etc., as needed. This currently contains some
         * simple sample code for mouse and keyboard interactions with a node
         * (rectangle) in a group.
         */

        r.setX(50);                                // 50px in the x direction (right)
        r.setY(50);                                // 50ps in the y direction (down)
        r.setOnMouseClicked(createMouseHandler()); // clicks on the rectangle move it randomly

        //Scene scene = new Scene(group, 640, 480);
        Scene scene = menu.getScene();
        menu.getRoot().setOnKeyPressed(createKeyHandler(stage, scene));
        menu.getSwitch(stage, scene);
        asteroids.getSwitch(stage, scene);
        stage.setTitle("cs1302-arcade!");
        stage.setScene(scene);
        stage.sizeToScene();
        stage.show();

        menu.getRoot().requestFocus();
    } // start

    /**
     * Return a mouse event handler that moves to the rectangle to a random
     * position any time a mouse event is generated by the associated node.
     * @return the mouse event handler
     */

    private EventHandler<? super MouseEvent> createMouseHandler() {
       return event -> {
            System.out.println(event);
            Rectangle newR = new Rectangle(20, 20);
            newR.setX(rng.nextDouble() * (640 - newR.getWidth()));
            newR.setY(rng.nextDouble() * (480 - newR.getHeight()));
            group.getChildren().add(newR);
            newR.setOnMouseClicked(createMouseHandler());
            };
    } // createMouseHandler
} // ArcadeApp
