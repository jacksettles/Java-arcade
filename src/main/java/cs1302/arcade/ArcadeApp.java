package cs1302.arcade;

import javafx.scene.transform.Rotate;
import javafx.geometry.Point2D;
import cs1302.arcade.Ship;
import javafx.scene.shape.Polygon;
import java.util.Random;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;


/**
 * Application subclass for {@code ArcadeApp}.
 * @version 2019.fa
 */
public class ArcadeApp extends Application {

    Group group = new Group();           // main container
    Random rng = new Random();           // random number generator
    Rectangle r = new Rectangle(20, 20); // some rectangle
    Double[] xCords = {320.0, 327.071, 312.929};
    Double[] yCords = {225.858, 247.071, 247.071};
    Ship ship = new Ship(xCords, yCords);
    Point2D shipCenter;
    Rotate right;
    Rotate left;

    /**
     * Return a mouse event handler that moves to the rectangle to a random
     * position any time a mouse event is generated by the associated node.
     * @return the mouse event handler
     */
    private EventHandler<? super MouseEvent> createMouseHandler() {
        return event -> {
            System.out.println(event);
            Rectangle newR = new Rectangle(20, 20);
            newR.setX(rng.nextDouble() * (640 - newR.getWidth()));
            newR.setY(rng.nextDouble() * (480 - newR.getHeight()));
            group.getChildren().add(newR);
            newR.setOnMouseClicked(createMouseHandler());
        };
    } // createMouseHandler

    private EventHandler<? super KeyEvent> moveShip() {
        return event -> {
            switch (event.getCode()) {
            case LEFT:  // KeyCode.LEFT
                Double[] lX = ship.getX();
                Double[] nlX = new Double[3];
                for (int i = 0; i < 3; i++) {
                    nlX[i] = lX[i] - 10.0;
                }
                ship.setPos(nlX, ship.getY());
                break;
            case RIGHT: // KeyCode.RIGHT
                Double[] rX = ship.getX();
                Double[] nrX = new Double[3];
                for (int i = 0; i < 3; i++) {
                    nrX[i] = rX[i] + 10.0;
                }
                ship.setPos(nrX, ship.getY());
                break;
            case UP: // KeyCode.UP
                Double[] uY = ship.getY();
                Double[] nuY = new Double[3];
                for (int i = 0; i < 3; i++) {
                    nuY[i] = uY[i] - 10.0;
                }
                ship.setPos(ship.getX(), nuY);
                break;
            case DOWN: //KeyCode.DOWN
                Double[] dY = ship.getY();
                Double[] ndY = new Double[3];
                for (int i = 0; i < 3; i++) {
                    ndY[i] = dY[i] + 10.0;
                }
                ship.setPos(ship.getX(), ndY);
                break;
            case D:
                shipCenter = ship.getCenter();
                right = new Rotate(15.0, shipCenter.getX(), shipCenter.getY());
                System.out.println(shipCenter.getX() + ", " + shipCenter.getY());
                ship.getTransforms().add(right);
                break;
            case W:
                shipCenter = ship.getCenter();
                left = new Rotate(-15.0, shipCenter.getX(), shipCenter.getY());
                System.out.println(shipCenter.getX() + ", " + shipCenter.getY());
                ship.getTransforms().add(left);
                break;
            } // switch
        };
    }

    /**
     * Return a key event handler that moves to the rectangle to the left
     * or the right depending on what key event is generated by the associated
     * node.
     * @return the key event handler
     */
    /*   private EventHandler<? super KeyEvent> createKeyHandler() {
        return event -> {
            //System.out.println(event);
            switch (event.getCode()) {
            case LEFT:  // KeyCode.LEFT
                r.setX(r.getX() - 10.0);
                break;
            case RIGHT: // KeyCode.RIGHT
                r.setX(r.getX() + 10.0);
                break;
            case UP: // KeyCode.UP
                r.setY(r.getY() - 10.0);
                break;
            case DOWN: //KeyCode.DOWN
                r.setY(r.getY() + 10.0);
                break;
            } // switch
            // boundary checking
            if (r.getX() > 620.0) {
                r.setX(r.getX() - 10.0);
            } else if (r.getX() < 0.0) {
                r.setX(r.getX() + 10.0);
            }
            if (r.getY() > 460.0) {
                r.setY(r.getY() - 10.0);
            } else if (r.getY() < 0.0) {
                r.setY(r.getY() + 10.0);
            }
        };
    } // createKeyHandler
*/
    /** {@inheritDoc} */
    @Override
    public void start(Stage stage) {

        /* You are allowed to rewrite this start method, add other methods,
         * files, classes, etc., as needed. This currently contains some
         * simple sample code for mouse and keyboard interactions with a node
         * (rectangle) in a group.
         */

        r.setX(50);                                // 50px in the x direction (right)
        r.setY(50);                                // 50ps in the y direction (down)
        group.getChildren().add(ship);                // add to main container
        ship.setOnKeyPressed(moveShip());
        r.setOnMouseClicked(createMouseHandler()); // clicks on the rectangle move it randomly
        //group.setOnKeyPressed(createKeyHandler()); // left-right key presses move the rectangle

        Scene scene = new Scene(group, 640, 480);
        stage.setTitle("cs1302-arcade!");
        stage.setScene(scene);
        stage.sizeToScene();
        stage.show();

        // the group must request input focus to receive key events
        // @see https://docs.oracle.com/javase/8/javafx/api/javafx/scene/Node.html#requestFocus--
        //group.requestFocus();

        ship.requestFocus();
    } // start

} // ArcadeApp
